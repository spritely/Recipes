// --------------------------------------------------------------------------------------------------------------------
// <copyright file="GoogleDrive.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Net;
    using System.Threading.Tasks;

    /// <summary>
    /// Encapsulates interactions with Google Drive.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal class GoogleDrive
    {
        private const string DriveReadOnlyScope = "https://www.googleapis.com/auth/drive.readonly";
        private const string FilesApiBaseUri = "https://www.googleapis.com/drive/v2/files/";
        private readonly GoogleAuthorizer authorizer;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleDrive" /> class.
        /// </summary>
        /// <param name="authorizer">The authorizer.</param>
        public GoogleDrive(GoogleAuthorizer authorizer)
        {
            if (authorizer == null)
            {
                throw new ArgumentNullException(nameof(authorizer));
            }

            this.authorizer = authorizer;
        }

        /// <summary>
        /// Downloads the specified file as CSV.
        /// </summary>
        /// <param name="fileId">The file identifier.</param>
        /// <param name="destinationFilePath">The destination file path.</param>
        /// <returns>Task tracking asynchronous processes.</returns>
        /// <exception cref="System.ArgumentNullException">If any arguments are null or empty.</exception>
        /// <exception cref="System.Net.WebException">
        /// If Unable to download file or file does not contain an export link for csv.
        /// </exception>
        public async Task DownloadAsCsv(string fileId, string destinationFilePath)
        {
            if (string.IsNullOrWhiteSpace(fileId))
            {
                throw new ArgumentNullException("fileId");
            }

            if (string.IsNullOrWhiteSpace(destinationFilePath))
            {
                throw new ArgumentNullException("destinationFilePath");
            }

            var accessToken = await authorizer.Authorize(DriveReadOnlyScope);

            var webClient = new WebClient();
            webClient.AddAuthorizationHeader(accessToken);

            var response = await webClient.DownloadStringTaskAsync(FilesApiBaseUri + fileId);
            var file = JsonWebToken.JsonWebTokenJsonDeserialize(response);

            if (file == null)
            {
                throw new WebException($"Unable to download file '{fileId}'");
            }

            var csvExportLink = ((dynamic)file).exportLinks["text/csv"];

            if (csvExportLink == null || string.IsNullOrWhiteSpace(csvExportLink.ToString()))
            {
                throw new WebException("${fileId} did not contain an export link for csv");
            }

            var csvExportUri = new Uri(csvExportLink.ToString());

            var webClient2 = new WebClient();
            webClient2.AddAuthorizationHeader(accessToken);

            await webClient2.DownloadFileTaskAsync(csvExportUri, destinationFilePath);
        }
    }
#if !RecipesProject
#pragma warning restore 0436
#endif
}
