// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Base64UrlExtensions.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Text;

    /// <summary>
    /// Responsible for encoding or decoding Base64Url encoded values.
    /// </summary>
#if !SpritelyRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static class Base64UrlExtensions
    {
        /// <summary>
        /// Encodes the specified value.
        /// </summary>
        /// <param name="value">The value to encode.</param>
        /// <returns>The encoded value.</returns>
        /// <exception cref="System.ArgumentNullException">If value is null.</exception>
        public static string EncodeBase64Url(this string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("value");
            }

            var bytes = Encoding.UTF8.GetBytes(value);
            return bytes.EncodeBase64Url();
        }

        /// <summary>
        /// Encodes the specified value.
        /// </summary>
        /// <param name="value">The value to encode.</param>
        /// <returns>The encoded value.</returns>
        /// <exception cref="System.ArgumentNullException">If value is null.</exception>
        public static string EncodeBase64Url(this byte[] value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("value");
            }

            var encoded = Convert.ToBase64String(value).TrimEnd('=').Replace('+', '-').Replace('/', '_');
            return encoded;
        }

        /// <summary>
        /// Decodes the specified value.
        /// </summary>
        /// <param name="value">The value to decode.</param>
        /// <returns>The decoded value.</returns>
        /// <exception cref="System.ArgumentNullException">If value is null.</exception>
        public static byte[] DecodeBase64Url(this string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("value");
            }

            var decoded = Convert.FromBase64String(PadWithTrailing(value.Replace('-', '+').Replace('_', '/'), trailing: '=', atMod: 4));
            return decoded;
        }

        private static string PadWithTrailing(string value, char trailing, int atMod)
        {
            // Length (1,2,3,4,5,6,7,8) -> x % 4 (1,2,3,0,1,2,3,0) -> 4 - x (3,2,1,4,3,2,1,4)

            var padding = atMod - (value.Length % atMod);

            if (padding == atMod)
            {
                return value;
            }

            var padded = value + new string(trailing, padding);
            return padded;
        }
    }
#if !SpritelyRecipesProject
#pragma warning restore 0436
#endif
}
