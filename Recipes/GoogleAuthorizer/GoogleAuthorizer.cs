// --------------------------------------------------------------------------------------------------------------------
// <copyright file="GoogleAuthorizer.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.IO;
    using System.Security.Cryptography.X509Certificates;
    using System.Threading.Tasks;

    /// <summary>
    /// Responsible for authorizing access to Google APIs.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal class GoogleAuthorizer
    {
        private readonly Uri authorizeUri = new Uri("https://www.googleapis.com/oauth2/v3/token");
        private readonly GoogleAuthorizerSettings settings;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleAuthorizer" /> class.
        /// </summary>
        /// <param name="settings">The settings.</param>
        public GoogleAuthorizer(GoogleAuthorizerSettings settings)
        {
            if (settings == null)
            {
                throw new ArgumentNullException("settings");
            }

            this.settings = settings;
        }

        /// <summary>
        /// Authorizes the specified scopes.
        /// </summary>
        /// <param name="scopes">The scopes.</param>
        /// <returns>An access token.</returns>
        public async Task<JsonWebTokenAccessToken> Authorize(params string[] scopes)
        {
            var claimSet = new JsonWebTokenClaimSet
            {
                Audience = authorizeUri,
                Issuer = settings.ServiceAccount,
                Duration = TimeSpan.FromMinutes(59)
            };

            foreach (var scope in scopes)
            {
                claimSet.Scopes.Add(scope);
            }

            var certficateFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, settings.CertificateFile);
            var certificate = new X509Certificate2(certficateFilePath, settings.CertificatePassword, X509KeyStorageFlags.Exportable);
            var signer = new Sha256JsonWebTokenSigner(certificate);
            var result = await JsonWebToken.Authorize(claimSet, signer);

            return result;
        }
    }
#if !RecipesProject
#pragma warning restore 0436
#endif
}
