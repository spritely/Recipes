// --------------------------------------------------------------------------------------------------------------------
// <copyright file="GoogleAuthorizer.cs">
//     Copyright (c) 2017. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Security.Cryptography.X509Certificates;
    using System.Threading.Tasks;

    /// <summary>
    /// Responsible for authorizing access to Google APIs.
    /// </summary>
#if !SpritelyRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static class GoogleAuthorizer
    {
        private static readonly Uri authorizeUri = new Uri("https://www.googleapis.com/oauth2/v3/token");

        /// <summary>
        /// Authorizes the specified scopes.
        /// </summary>
        /// <param name="serviceAccount">The service account.</param>
        /// <param name="certificate">The certificate.</param>
        /// <param name="scopes">The scopes.</param>
        /// <returns>
        /// An access token.
        /// </returns>
        public static async Task<JsonWebTokenAccessToken> Authorize(string serviceAccount, X509Certificate2 certificate, params string[] scopes)
        {
            if (string.IsNullOrWhiteSpace(serviceAccount))
            {
                throw new ArgumentNullException("serviceAccount");
            }

            if (certificate == null)
            {
                throw new ArgumentNullException("certificate");
            }

            var claimSet = new JsonWebTokenClaimSet
            {
                Audience = authorizeUri,
                Issuer = serviceAccount,
                Duration = TimeSpan.FromMinutes(59)
            };

            foreach (var scope in scopes)
            {
                claimSet.Scopes.Add(scope);
            }

            var signer = new Sha256JsonWebTokenSigner(certificate);
            var result = await JsonWebToken.Authorize(claimSet, signer);

            return result;
        }
    }
#if !SpritelyRecipesProject
#pragma warning restore 0436
#endif
}
