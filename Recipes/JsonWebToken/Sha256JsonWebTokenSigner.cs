// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Sha256JsonWebTokenSigner.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Security.Cryptography;
    using System.Security.Cryptography.X509Certificates;

    /// <summary>
    /// An IJsonWebTokenSigner that signs with the Sha256 algorithm.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#endif
    internal class Sha256JsonWebTokenSigner : IJsonWebTokenSigner
    {
        private readonly X509Certificate2 certificate;

        /// <summary>
        /// Initializes a new instance of the <see cref="Sha256JsonWebTokenSigner" /> class.
        /// </summary>
        /// <param name="certificate">The certificate.</param>
        /// <exception cref="System.ArgumentNullException">If certificate is null.</exception>
        public Sha256JsonWebTokenSigner(X509Certificate2 certificate)
        {
            if (certificate == null)
            {
                throw new ArgumentNullException("certificate");
            }

            this.certificate = certificate;
            AlgorithmName = "RS256";
        }

        /// <inheritdoc />
        public string AlgorithmName { get; private set; }

        /// <inheritdoc />
        public byte[] Sign(byte[] data)
        {
            var cspBlob = ((RSACryptoServiceProvider)certificate.PrivateKey).ExportCspBlob(true);
            var cryptoServiceProvider = new RSACryptoServiceProvider();
            cryptoServiceProvider.ImportCspBlob(cspBlob);
            var signatureBytes = cryptoServiceProvider.SignData(data, "SHA256");
            return signatureBytes;
        }
    }
}
