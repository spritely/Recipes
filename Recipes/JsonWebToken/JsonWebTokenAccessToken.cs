// --------------------------------------------------------------------------------------------------------------------
// <copyright file="JsonWebTokenAccessToken.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;

    /// <summary>
    /// The access token response object for a JSON web token request.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#endif
    internal class JsonWebTokenAccessToken
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>The access token.</value>
        public string AccessToken { get; }

        /// <summary>
        /// Gets or sets the audience.
        /// </summary>
        /// <value>The audience.</value>
        public string TokenType { get; }

        /// <summary>
        /// Gets or sets the duration.
        /// </summary>
        /// <value>The duration.</value>
        public TimeSpan ExpiresIn { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="JsonWebTokenAccessToken" /> class.
        /// </summary>
        /// <param name="accessToken">The access token.</param>
        /// <exception cref="System.ArgumentNullException">If accessToken is null,</exception>
        public JsonWebTokenAccessToken(object accessToken)
        {
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken");
            }

            var token = accessToken as dynamic;

            AccessToken = token.access_token;
            TokenType = token.token_type;
            ExpiresIn = TimeSpan.FromSeconds(Convert.ToDouble(token.expires_in));
        }
    }
}
