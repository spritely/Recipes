// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FormattableString.cs">
//   Copyright - see below
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

// Copied from: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/FormattableString.cs
// On: 9/9/2015
// Slight modifications made to allow file to be injected as a recipe
// This file is duplicated here so that assemblies built for versions of the .NET framework earlier
// than 4.6 (where this source is originated) can run with C# 6 features.

// Copyright (c) Microsoft. All rights reserved. 
// Licensed under the MIT license. See LICENSE file in the project root for full license information. 

/*============================================================
**
** Class:  FormattableString
**
**
** Purpose: implementation of the FormattableString
** class.
**
===========================================================*/

namespace System
{
    using System.Globalization;

    /// <summary>
    ///     A composite format string along with the arguments to be formatted. An instance of this type
    ///     may result from the use of the C# or VB language primitive "interpolated string".
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#endif
    internal abstract class FormattableString : IFormattable
    {
        /// <summary>
        ///     The number of arguments to be formatted.
        /// </summary>
        public abstract int ArgumentCount { get; }

        /// <summary>
        ///     The composite format string.
        /// </summary>
        public abstract string Format { get; }

        /// <summary>
        ///     Returns an object array that contains zero or more objects to format. Clients should not
        ///     mutate the contents of the array.
        /// </summary>
        public abstract object[] GetArguments();

        /// <summary>
        ///     Returns one argument to be formatted from argument position <paramref name="index" />.
        /// </summary>
        public abstract object GetArgument(int index);

        /// <summary>
        ///     Format to a string using the given culture.
        /// </summary>
        public abstract string ToString(IFormatProvider formatProvider);

        /// <summary>
        ///     Format the given object in the invariant culture. This static method may be imported in
        ///     C# by
        ///     <code>
        /// using static System.FormattableString;
        /// </code>
        ///     . Within the scope of that import directive an interpolated string may be formatted in
        ///     the invariant culture by writing, for example,
        ///     <code>
        /// Invariant($"{{ lat = {latitude}; lon = {longitude} }}")
        /// </code>
        /// </summary>
        public static string Invariant(FormattableString formattable)
        {
            if (formattable == null)
            {
                throw new ArgumentNullException("formattable");
            }

            return formattable.ToString(CultureInfo.InvariantCulture);
        }

        public override string ToString()
        {
            return ToString(CultureInfo.CurrentCulture);
        }

        string IFormattable.ToString(string ignored, IFormatProvider formatProvider)
        {
            return ToString(formatProvider);
        }
    }
}
