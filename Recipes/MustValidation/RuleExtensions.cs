// --------------------------------------------------------------------------------------------------------------------
// <copyright file="RuleExtensions.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    // See MustExtensions.cs for comments on type definitions
    using GetArguments = System.Func<System.Collections.Generic.IEnumerable<System.Tuple<System.Type, string, object>>>;
    using Rule = System.Tuple<System.Func<System.Type, object, bool>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Type, System.Collections.Generic.IEnumerable<string>, object, string, System.Exception>>;

    /// <summary>
    ///     Contains built-in extensions for Must Rules.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static partial class RuleExtensions
    {
        /// <summary>
        /// Validates the arguments and appends the specified rule(s).
        /// </summary>
        /// <param name="validationPlan">The validation plan to update.</param>
        /// <param name="rules">The rules to add.</param>
        /// <returns></returns>
        /// <exception cref="System.ArgumentNullException">
        /// If validationPlan or rules is null.
        /// </exception>
        /// <exception cref="System.ArgumentException">ValidateArgumentsAndAppendRule requires at least 1 rule to append.</exception>
        public static Tuple<GetArguments, IEnumerable<Rule>> ValidateArgumentsAndAppendRule(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, params Rule[] rules)
        {
            if (validationPlan == null)
            {
                throw new ArgumentNullException("validationPlan");
            }

            if (rules == null)
            {
                throw new ArgumentNullException("rules");
            }

            if (rules.Length < 1)
            {
                throw new ArgumentException("ValidateArgumentsAndAppendRule requires at least 1 rule to append.");
            }

            var result = Tuple.Create(
                validationPlan.Item1,
                validationPlan.Item2.Concat(rules));

            return result;
        }

        /// <summary>
        /// Adds a NotNull check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotNull(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotNull);
        }

        /// <summary>
        /// Adds a False check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> False(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.False);
        }

        /// <summary>
        /// Adds a True check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> True(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.True);
        }

        /// <summary>
        /// Adds a NotEmptyString check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotEmptyString(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotEmptyString);
        }

        /// <summary>
        /// Adds a NotNullOrEmptyString check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotNullOrEmptyString(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotNullOrEmptyString);
        }

        /// <summary>
        /// Adds a NotNullOrWhiteSpace check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotNullOrWhiteSpace(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotNullOrWhiteSpace);
        }

        /// <summary>
        /// Adds a NotWhiteSpace check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotWhiteSpace(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotWhiteSpace);
        }

        /// <summary>
        /// Adds a NotEmtpyGuid check to the validation plan rules.
        /// </summary>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>A revised validation report definition.</returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotEmptyGuid(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotEmptyGuid);
        }

        /// <summary>
        /// Adds a NotDefault check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of default to check for.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotDefault<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
             where T : struct, IEquatable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotDefault<T>());
        }

        /// <summary>
        /// Adds a NotNullOrDefault check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of default to check for.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotNullOrDefault<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
            where T : IEquatable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotNullOrDefault<T>());
        }

        /// <summary>
        /// Adds a NotNullOrEmptyEnumerable check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of value contained in the enumerable.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotNullOrEmptyEnumerable<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotNullOrEmptyEnumerable<T>());
        }

        /// <summary>
        /// Adds a NotNullOrContainAnyNulls check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of value contained in the enumerable.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> NotNullOrContainAnyNulls<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan)
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.NotNullOrContainAnyNulls<T>());
        }

        /// <summary>
        /// Adds an InRange check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of compariable to check.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <param name="minimum">The minimum value.</param>
        /// <param name="maximum">The maximum value.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> InRange<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, T minimum, T maximum)
            where T : IComparable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.InRange(minimum, maximum));
        }

        /// <summary>
        /// Adds a LessThan check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of compariable to check.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <param name="requirement">The requirement to meet.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> LessThan<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, T requirement)
            where T : IComparable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.LessThan(requirement));
        }

        /// <summary>
        /// Adds a LessThanOrEqualTo check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of compariable to check.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <param name="requirement">The requirement to meet.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> LessThanOrEqualTo<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, T requirement)
            where T : IComparable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.LessThanOrEqualTo(requirement));
        }

        /// <summary>
        /// Adds an EqualTo check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of compariable to check.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <param name="requirement">The requirement to meet.</param>
        /// <returns>
        /// A revised validation plan.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> EqualTo<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, T requirement)
            where T : IEquatable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.EqualTo(requirement));
        }

        /// <summary>
        /// Adds a GreatherThan check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of compariable to check.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <param name="requirement">The requirement to meet.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> GreaterThan<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, T requirement)
            where T : IComparable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.GreaterThan(requirement));
        }

        /// <summary>
        /// Adds a GreaterThanOrEqualTo check to the validation plan rules.
        /// </summary>
        /// <typeparam name="T">The type of compariable to check.</typeparam>
        /// <param name="validationPlan">The validation plan.</param>
        /// <param name="requirement">The requirement to meet.</param>
        /// <returns>
        /// A revised validation report definition.
        /// </returns>
        public static Tuple<GetArguments, IEnumerable<Rule>> GreaterThanOrEqualTo<T>(this Tuple<GetArguments, IEnumerable<Rule>> validationPlan, T requirement)
            where T : IComparable<T>
        {
            return ValidateArgumentsAndAppendRule(validationPlan, Rules.GreaterThanOrEqualTo(requirement));
        }
    }
#if !RecipesProject
#pragma warning restore 0436
#endif
}
