// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Require.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Globalization;

    /// <summary>
    ///     Contains a set of built in validation functions.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static partial class Require
    {
        /// <summary>
        /// Validates the value is not null.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="value">The value.</param>
        /// <returns>An ArgumentNullException or null if value is not null.</returns>
        public static Exception NotNull(string name, object value)
        {
            return value == null ? new ArgumentNullException(name) : null;
        }

        /// <summary>
        /// Creates a function that requires the arguments be in the specified range.
        /// </summary>
        /// <param name="minimum">The minimum.</param>
        /// <param name="maximum">The maximum.</param>
        /// <returns>A function to validate a result is in range.</returns>
        public static Func<string, object, Exception> InRange(int minimum, int maximum)
        {
            return (name, value) =>
            {
                if (value == null)
                {
                    return new ArgumentNullException(name);
                }

                var valueType = value.GetType();
                if (valueType != typeof(int) && valueType != typeof(int?))
                {
                    return new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is an invalid type, int or int? is required.", name));
                }

                var intValue = value as int?;

                if (intValue == null)
                {
                    return new ArgumentNullException(name);
                }

                if (intValue.Value < minimum)
                {
                    return new ArgumentOutOfRangeException(name, intValue.Value, string.Format(CultureInfo.InvariantCulture, "Value is less than minimum of {0}", minimum));
                }

                if (intValue.Value > maximum)
                {
                    return new ArgumentOutOfRangeException(name, intValue.Value, string.Format(CultureInfo.InvariantCulture, "Value is greater than maximum of {0}", maximum));
                }

                return null;
            };
        }
    }
#if !RecipesProject
#pragma warning restore 0436
#endif
}
