// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Rules.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    // See MustExtensions.cs for comments on type definitions
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using GetArguments = System.Func<System.Collections.Generic.IEnumerable<System.Tuple<System.Type, string, object>>>;
    using Rule = System.Tuple<System.Func<System.Type, object, bool>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Type, System.Collections.Generic.IEnumerable<string>, object, string, System.Exception>>;

    /// <summary>
    ///     Contains built-in Must Rules.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static partial class Rules
    {
        /// <summary>
        /// Instance cannot be null rule.
        /// </summary>
        public static Rule NotNull = MakeRule.That<object>(o => o != null).OrCreateArgumentNullException();

        /// <summary>
        /// String cannot be not null or empty rule.
        /// </summary>
        public static Rule NotNullOrEmptyString =
            MakeRule.That<string>(s => !string.IsNullOrEmpty(s))
                .OrCreateArgumentException()
                .Because("Argument cannot be null or empty.");

        /// <summary>
        /// String cannot be not null or white space rule.
        /// </summary>
        public static Rule NotNullOrWhiteSpace =
            MakeRule.That<string>(s => !string.IsNullOrWhiteSpace(s))
                .OrCreateArgumentException()
                .Because("Argument cannot be null or whitespace.");

        /// <summary>
        /// The unique identifer cannot be not empty rule.
        /// </summary>
        public static Rule NotEmptyGuid = MakeRule.That<Guid>(id => id != Guid.Empty).OrCreateArgumentException();

        /// <summary>
        /// Makes an enumerable cannot be null or empty rule.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>The rule.</returns>
        public static Rule NotNullOrEmptyEnumerable<T>()
        {
            return MakeRule.That<IEnumerable<T>>(e => e != null && e.Any()).OrCreateArgumentException();
        }

        /// <summary>
        /// Makes an enumerable cannot be null or contain any nulls rule.
        /// </summary>
        /// <typeparam name="T">The type contained in the enumerable.</typeparam>
        /// <returns>The rule.</returns>
        public static Rule NotNullOrContainAnyNulls<T>()
        {
            return MakeRule.That<IEnumerable<T>>(e => e != null && e.All(i => i != null)).OrCreateArgumentException();
        }

        /// <summary>
        /// Makes a compariable value must be in range rule.
        /// </summary>
        /// <typeparam name="T">The type being compared.</typeparam>
        /// <param name="minimum">The minimum value.</param>
        /// <param name="maximum">The maximum value.</param>
        /// <returns>The rule.</returns>
        public static Rule InRange<T>(T minimum, T maximum) where T : IComparable
        {
            return MakeRule.That<T>(v => v.CompareTo(minimum) >= 0 && v.CompareTo(maximum) <= 0)
                .OrCreateArgumentOutOfRangeException()
                .Because($"Value must range from {minimum} to {maximum}.");
        }

        /// <summary>
        /// Makes a value must be less than rule.
        /// </summary>
        /// <typeparam name="T">The type being compared.</typeparam>
        /// <param name="requirement">The requirement value must meet.</param>
        /// <returns>The rule.</returns>
        public static Rule LessThan<T>(T requirement) where T : IComparable
        {
            return MakeRule.That<T>(v => v.CompareTo(requirement) < 0)
                .OrCreateArgumentOutOfRangeException()
                .Because($"Value must be less than {requirement}.");
        }

        /// <summary>
        /// Makes a value must be less than or equal to rule.
        /// </summary>
        /// <typeparam name="T">The type being compared.</typeparam>
        /// <param name="requirement">The requirement value must meet.</param>
        /// <returns>The rule.</returns>
        public static Rule LessThanOrEqualTo<T>(T requirement) where T : IComparable
        {
            return MakeRule.That<T>(v => v.CompareTo(requirement) <= 0)
                .OrCreateArgumentOutOfRangeException()
                .Because($"Value must be less than or equal to {requirement}.");
        }

        /// <summary>
        /// Makes a value must be greater than rule.
        /// </summary>
        /// <typeparam name="T">The type being compared.</typeparam>
        /// <param name="requirement">The requirement value must meet.</param>
        /// <returns>The rule.</returns>
        public static Rule GreaterThan<T>(T requirement) where T : IComparable
        {
            return MakeRule.That<T>(v => v.CompareTo(requirement) > 0)
                .OrCreateArgumentOutOfRangeException()
                .Because($"Value must be greater than {requirement}.");
        }

        /// <summary>
        /// Makes a value must be greater than or equal to rule.
        /// </summary>
        /// <typeparam name="T">The type being compared.</typeparam>
        /// <param name="requirement">The requirement value must meet.</param>
        /// <returns>The rule.</returns>
        public static Rule GreaterThanOrEqualTo<T>(T requirement) where T : IComparable
        {
            return MakeRule.That<T>(v => v.CompareTo(requirement) >= 0)
                .OrCreateArgumentOutOfRangeException()
                .Because($"Value must be greater than or equal to {requirement}.");
        }
    }
#if !RecipesProject
#pragma warning restore 0436
#endif
}
