// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParsingExtensions.cs">
//     Copyright (c) 2017. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Globalization;

    /// <summary>
    ///     Contains extension methods for parsing strings to particular types (and avoid the .TryParse pattern).
    /// </summary>
#if !SpritelyRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#pragma warning disable 0436
#endif
    internal static partial class ParsingExtensions
    {
        /// <summary>
        /// Trys to convert the string to a boolean and uses a default value if it cannot be converted.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A boolean value.</returns>
        public static bool ToBoolean(this string value, bool defaultValue = default(bool))
        {
            bool result;
            var finalResult = bool.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Trys to convert the string to a boolean and uses a default value if it cannot be converted.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="defaultValue">Delegate to obtain a default value.</param>
        /// <returns>A boolean value.</returns>
        public static bool ToBoolean(this string value, Func<string, bool> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            bool result;
            var finalResult = bool.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A byte value.</returns>
        public static byte ToByte(this string value, byte defaultValue = default(byte))
        {
            byte result;
            var finalResult = byte.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>
        /// A byte value.
        /// </returns>
        public static byte ToByte(this string value, Func<string, byte> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            byte result;
            var finalResult = byte.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// A byte value.
        /// </returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
        public static byte ToByte(this string value, NumberStyles style, IFormatProvider provider, byte defaultValue = default(byte))
        {
            byte result;
            var finalResult = byte.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>
        /// A byte value.
        /// </returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
        public static byte ToByte(this string value, NumberStyles style, IFormatProvider provider, Func<string, byte> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            byte result;
            var finalResult = byte.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the value of the specified string to its equivalent Unicode character. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string that contains a single character, or null.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// A char value.
        /// </returns>
        public static char ToChar(this string value, char defaultValue = default(char))
        {
            char result;
            var finalResult = char.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the value of the specified string to its equivalent Unicode character. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string that contains a single character, or null.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>
        /// A char value.
        /// </returns>
        public static char ToChar(this string value, Func<string, char> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            char result;
            var finalResult = char.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// A date time value.
        /// </returns>
        public static DateTime ToDateTime(this string value, DateTime defaultValue = default(DateTime))
        {
            DateTime result;
            var finalResult = DateTime.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="defaultValue">The delegate used to obtain a default value.</param>
        /// <returns>
        /// A date time value.
        /// </returns>
        public static DateTime ToDateTime(this string value, Func<string, DateTime> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            DateTime result;
            var finalResult = DateTime.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="style">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// A date time value.
        /// </returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        /// <exception cref="T:System.NotSupportedException"><paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        public static DateTime ToDateTime(this string value, DateTimeStyles style, IFormatProvider provider, DateTime defaultValue = default(DateTime))
        {
            DateTime result;
            var finalResult = DateTime.TryParse(value, provider, style, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="style">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None"/>.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
        /// <param name="defaultValue">The delegate used to obtain a default value.</param>
        /// <returns>
        /// A date time value.
        /// </returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        /// <exception cref="T:System.NotSupportedException"><paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        public static DateTime ToDateTime(this string value, DateTimeStyles style, IFormatProvider provider, Func<string, DateTime> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            DateTime result;
            var finalResult = DateTime.TryParse(value, provider, style, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts a string to a Decimal. The string must consist of an optional
        /// minus sign ("-") followed by a sequence of digits ("0" - "9"). The 
        /// sequence of digits may optionally contain a single decimal point (".") 
        /// character. Leading and trailing whitespace characters are allowed.
        /// Parse also allows a currency symbol, a trailing negative sign, and 
        /// parentheses in the number. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A decimal value.</returns>
        public static decimal ToDecimal(this string value, decimal defaultValue = default(decimal))
        {
            decimal result;
            var finalResult = decimal.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts a string to a Decimal. The string must consist of an optional
        /// minus sign ("-") followed by a sequence of digits ("0" - "9"). The 
        /// sequence of digits may optionally contain a single decimal point (".") 
        /// character. Leading and trailing whitespace characters are allowed.
        /// Parse also allows a currency symbol, a trailing negative sign, and 
        /// parentheses in the number. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A decimal value.</returns>
        public static decimal ToDecimal(this string value, Func<string, decimal> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            decimal result;
            var finalResult = decimal.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts a string to a Decimal. The string must consist of an optional
        /// minus sign ("-") followed by a sequence of digits ("0" - "9"). The 
        /// sequence of digits may optionally contain a single decimal point (".") 
        /// character. Leading and trailing whitespace characters are allowed.
        /// Parse also allows a currency symbol, a trailing negative sign, and 
        /// parentheses in the number. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A decimal value.</returns>
        public static decimal ToDecimal(this string value, NumberStyles style, IFormatProvider provider, decimal defaultValue = default(decimal))
        {
            decimal result;
            var finalResult = decimal.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts a string to a Decimal. The string must consist of an optional
        /// minus sign ("-") followed by a sequence of digits ("0" - "9"). The 
        /// sequence of digits may optionally contain a single decimal point (".") 
        /// character. Leading and trailing whitespace characters are allowed.
        /// Parse also allows a currency symbol, a trailing negative sign, and 
        /// parentheses in the number. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A decimal value.</returns>
        public static decimal ToDecimal(this string value, NumberStyles style, IFormatProvider provider, Func<string, decimal> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            decimal result;
            var finalResult = decimal.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A decimal value.</returns>
        public static double ToDouble(this string value, double defaultValue = default(double))
        {
            double result;
            var finalResult = double.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A decimal value.</returns>
        public static double ToDouble(this string value, Func<string, double> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            double result;
            var finalResult = double.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float"/> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>. </param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A decimal value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
        public static double ToDouble(this string value, NumberStyles style, IFormatProvider provider, double defaultValue = default(double))
        {
            double result;
            var finalResult = double.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float"/> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>. </param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A decimal value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
        public static double ToDouble(this string value, NumberStyles style, IFormatProvider provider, Func<string, double> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            double result;
            var finalResult = double.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A short value.</returns>
        public static short ToInt16(this string value, short defaultValue = default(short))
        {
            short result;
            var finalResult = short.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A short value.</returns>
        public static short ToInt16(this string value, Func<string, short> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            short result;
            var finalResult = short.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A short value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static short ToInt16(this string value, NumberStyles style, IFormatProvider provider, short defaultValue = default(short))
        {
            short result;
            var finalResult = short.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A short value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static short ToInt16(this string value, NumberStyles style, IFormatProvider provider, Func<string, short> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            short result;
            var finalResult = short.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An int value.</returns>
        public static int ToInt32(this string value, int defaultValue = default(int))
        {
            int result;
            var finalResult = int.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An int value.</returns>
        public static int ToInt32(this string value, Func<string, int> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            int result;
            var finalResult = int.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An int value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static int ToInt32(this string value, NumberStyles style, IFormatProvider provider, int defaultValue = default(int))
        {
            int result;
            var finalResult = int.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An int value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static int ToInt32(this string value, NumberStyles style, IFormatProvider provider, Func<string, int> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            int result;
            var finalResult = int.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A long value.</returns>
        public static long ToInt64(this string value, long defaultValue = default(long))
        {
            long result;
            var finalResult = long.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A long value.</returns>
        public static long ToInt64(this string value, Func<string, long> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            long result;
            var finalResult = long.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A long value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static long ToInt64(this string value, NumberStyles style, IFormatProvider provider, long defaultValue = default(long))
        {
            long result;
            var finalResult = long.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A long value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static long ToInt64(this string value, NumberStyles style, IFormatProvider provider, Func<string, long> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            long result;
            var finalResult = long.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A signed byte value.</returns>
        public static sbyte ToSByte(this string value, sbyte defaultValue = default(sbyte))
        {
            sbyte result;
            var finalResult = sbyte.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>
        /// A sbyte value.
        /// </returns>
        public static sbyte ToSByte(this string value, Func<string, sbyte> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            sbyte result;
            var finalResult = sbyte.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>
        /// A signed byte value.
        /// </returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
        public static sbyte ToSByte(this string value, NumberStyles style, IFormatProvider provider, sbyte defaultValue = default(sbyte))
        {
            sbyte result;
            var finalResult = sbyte.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style" />.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        /// <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />. If <paramref name="provider" /> is null, the thread current culture is used.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>
        /// A signed byte value.
        /// </returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-<paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
        public static sbyte ToSByte(this string value, NumberStyles style, IFormatProvider provider, Func<string, sbyte> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            sbyte result;
            var finalResult = sbyte.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Parses a float from a String in the given style.  If
        /// a NumberFormatInfo isn't specified, the current culture's 
        /// NumberFormatInfo is assumed.
        /// This method will not throw an OverflowException, but will return
        /// PositiveInfinity or NegativeInfinity for a number that is too 
        /// large or too small. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A float value.</returns>
        public static float ToSingle(this string value, float defaultValue = default(float))
        {
            float result;
            var finalResult = float.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Parses a float from a String in the given style.  If
        /// a NumberFormatInfo isn't specified, the current culture's 
        /// NumberFormatInfo is assumed.
        /// This method will not throw an OverflowException, but will return
        /// PositiveInfinity or NegativeInfinity for a number that is too 
        /// large or too small. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A float value.</returns>
        public static float ToSingle(this string value, Func<string, float> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            float result;
            var finalResult = float.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Parses a float from a String in the given style.  If
        /// a NumberFormatInfo isn't specified, the current culture's 
        /// NumberFormatInfo is assumed.
        /// This method will not throw an OverflowException, but will return
        /// PositiveInfinity or NegativeInfinity for a number that is too 
        /// large or too small. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float"/> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>. </param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>A float value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
        public static float ToSingle(this string value, NumberStyles style, IFormatProvider provider, float defaultValue = default(float))
        {
            float result;
            var finalResult = float.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Parses a float from a String in the given style.  If
        /// a NumberFormatInfo isn't specified, the current culture's 
        /// NumberFormatInfo is assumed.
        /// This method will not throw an OverflowException, but will return
        /// PositiveInfinity or NegativeInfinity for a number that is too 
        /// large or too small. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float"/> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>. </param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>A float value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
        public static float ToSingle(this string value, NumberStyles style, IFormatProvider provider, Func<string, float> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            float result;
            var finalResult = float.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An unsigned short value.</returns>
        public static ushort ToUInt16(this string value, ushort defaultValue = default(ushort))
        {
            ushort result;
            var finalResult = ushort.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An unsigned short value.</returns>
        public static ushort ToUInt16(this string value, Func<string, ushort> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            ushort result;
            var finalResult = ushort.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An unsigned short value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static ushort ToUInt16(this string value, NumberStyles style, IFormatProvider provider, ushort defaultValue = default(ushort))
        {
            ushort result;
            var finalResult = ushort.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 16-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An unsigned short value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static ushort ToUInt16(this string value, NumberStyles style, IFormatProvider provider, Func<string, ushort> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            ushort result;
            var finalResult = ushort.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An unsigned int value.</returns>
        public static uint ToUInt32(this string value, uint defaultValue = default(uint))
        {
            uint result;
            var finalResult = uint.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An unsigned int value.</returns>
        public static uint ToUInt32(this string value, Func<string, uint> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            uint result;
            var finalResult = uint.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An unsigned int value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static uint ToUInt32(this string value, NumberStyles style, IFormatProvider provider, uint defaultValue = default(uint))
        {
            uint result;
            var finalResult = uint.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An unsigned int value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static uint ToUInt32(this string value, NumberStyles style, IFormatProvider provider, Func<string, uint> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            uint result;
            var finalResult = uint.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An unsigned long value.</returns>
        public static ulong ToUInt64(this string value, ulong defaultValue = default(ulong))
        {
            ulong result;
            var finalResult = ulong.TryParse(value, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An unsigned long value.</returns>
        public static ulong ToUInt64(this string value, Func<string, ulong> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            ulong result;
            var finalResult = ulong.TryParse(value, out result) ? result : defaultValue(value);
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">The default value.</param>
        /// <returns>An unsigned long value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static ulong ToUInt64(this string value, NumberStyles style, IFormatProvider provider, ulong defaultValue = default(ulong))
        {
            ulong result;
            var finalResult = ulong.TryParse(value, style, provider, out result) ? result : defaultValue;
            return finalResult;
        }

        /// <summary>
        /// Converts the string representation of a number in a specified style and culture-specific format to its 64-bit unsigned integer equivalent. If the conversion fails the default value is used.
        /// </summary>
        /// <param name="value">A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.</param>
        /// <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value"/>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.</param>
        /// <param name="provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about <paramref name="value"/>.</param>
        /// <param name="defaultValue">Delegate used to obtain a default value.</param>
        /// <returns>An unsigned long value.</returns>
        /// <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or-<paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.</exception>
        public static ulong ToUInt64(this string value, NumberStyles style, IFormatProvider provider, Func<string, ulong> defaultValue)
        {
            if (defaultValue == null)
            {
                throw new ArgumentNullException(nameof(defaultValue));
            }

            ulong result;
            var finalResult = ulong.TryParse(value, style, provider, out result) ? result : defaultValue(value);
            return finalResult;
        }
    }
#if !SpritelyRecipesProject
#pragma warning restore 0436
#endif
}
