// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FormattableStringFactory.cs">
//   Copyright - see below
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

// Copied from: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Runtime/CompilerServices/FormattableStringFactory.cs
// On: 9/9/2015
// Slight modifications made to allow file to be injected as a recipe
// This file is duplicated here so that assemblies built for versions of the .NET framework earlier
// than 4.6 (where this source is originated) can run with C# 6 features.

// Copyright (c) Microsoft. All rights reserved. 
// Licensed under the MIT license. See LICENSE file in the project root for full license information. 

/*============================================================
**
** Class:  FormattableStringFactory
**
**
** Purpose: implementation of the FormattableStringFactory
** class.
**
===========================================================*/

namespace System.Runtime.CompilerServices
{
    /// <summary>
    ///     A factory type used by compilers to create instances of the type <see cref="FormattableString" />.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#endif
    internal static class FormattableStringFactory
    {
        /// <summary>
        ///     Create a <see cref="FormattableString" /> from a composite format string and object array
        ///     containing zero or more objects to format.
        /// </summary>
        public static FormattableString Create(string format, params object[] arguments)
        {
            if (format == null)
            {
                throw new ArgumentNullException("format");
            }

            if (arguments == null)
            {
                throw new ArgumentNullException("arguments");
            }

            return new ConcreteFormattableString(format, arguments);
        }

        private sealed class ConcreteFormattableString : FormattableString
        {
            private readonly object[] _arguments;
            private readonly string _format;

            internal ConcreteFormattableString(string format, object[] arguments)
            {
                _format = format;
                _arguments = arguments;
            }

            public override int ArgumentCount
            {
                get { return _arguments.Length; }
            }

            public override string Format
            {
                get { return _format; }
            }

            public override object[] GetArguments()
            {
                return _arguments;
            }

            public override object GetArgument(int index)
            {
                return _arguments[index];
            }

            public override string ToString(IFormatProvider formatProvider)
            {
                return string.Format(formatProvider, _format, _arguments);
            }
        }
    }
}
