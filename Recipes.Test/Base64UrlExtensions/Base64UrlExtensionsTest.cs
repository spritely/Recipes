// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Base64UrlExtensionsTest.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System;
    using System.Text;

    using NUnit.Framework;

    [TestFixture]
    public class Base64UrlExtensionsTest
    {
        // Used this service to produce values for testing: http://kjur.github.io/jsjws/tool_b64uenc.html
        [Test]
        public void EncodeBase64Url_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => (null as string).EncodeBase64Url());
            Assert.Throws<ArgumentNullException>(() => (null as byte[]).EncodeBase64Url());
        }

        [Test]
        public void DecodeBase64Url_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => (null as string).DecodeBase64Url());
        }

        [Test]
        public void EncodeBase64Url_produces_expected_encoding()
        {
            Assert.That("Value to encode".EncodeBase64Url(), Is.EqualTo("VmFsdWUgdG8gZW5jb2Rl"));
        }

        [Test]
        public void EncodeBase64Url_with_bytes_produces_expected_encoding()
        {
            var bytes = Encoding.UTF8.GetBytes("Byte value to encode");

            var encodedValue = bytes.EncodeBase64Url();

            Assert.That(encodedValue, Is.EqualTo("Qnl0ZSB2YWx1ZSB0byBlbmNvZGU"));
        }

        [Test]
        public void DecodeBase64Url_produces_expected_decoding()
        {
            var decodedValue = "ZGVjb2RlZCB2YWx1ZQ".DecodeBase64Url();

            Assert.That(decodedValue, Is.EqualTo(Encoding.UTF8.GetBytes("decoded value")));
        }
    }
}
