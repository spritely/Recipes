// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DefaultJsonSerializerTest.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using Newtonsoft.Json.Linq;

    using NUnit.Framework;

    [TestFixture]
    public class DefaultJsonSerializerTest
    {
        [Test]
        public void SerializeObject_without_type_serializes_to_json_using_DefaultSerializerSettings()
        {
            var dog = new Dog(5, "spud", FurColor.Brindle);

            var json = DefaultJsonSerializer.SerializeObject(dog);

            Assert.That(json, Is.EqualTo("{\r\n  \"name\": \"spud\",\r\n  \"furColor\": \"brindle\",\r\n  \"dogTag\": null,\r\n  \"age\": 5\r\n}"));
        }

        [Test]
        public void SerializeObject_with_type_serializes_to_json_using_DefaultSerializerSettings()
        {
            var dog = new Dog(5, "spud", FurColor.Brindle);

            var json = DefaultJsonSerializer.SerializeObject(dog, typeof(Animal));

            Assert.That(json, Is.EqualTo("{\r\n  \"name\": \"spud\",\r\n  \"furColor\": \"brindle\",\r\n  \"dogTag\": null,\r\n  \"age\": 5\r\n}"));
        }

        [Test]
        public void DeserializeObject_generic_deserializes_json_using_DefaultSerializerSettings()
        {
            var dogJson = "{\"name\":\"Barney\",\"furColor\":\"brindle\",\"age\":10}";

            var dog = DefaultJsonSerializer.DeserializeObject<Animal>(dogJson) as Dog;

            Assert.That(dog, Is.Not.Null);
            Assert.That(dog.Name, Is.EqualTo("Barney"));
            Assert.That(dog.Age, Is.EqualTo(10));
            Assert.That(dog.FurColor, Is.EqualTo(FurColor.Brindle));
            Assert.That(dog.DogTag, Is.Null);
        }

        [Test]
        public void DeserializeObject_with_type_deserializes_json_using_DefaultSerializerSettings()
        {
            var dogJson = "{\"name\":\"Barney\",\"furColor\":\"brindle\",\"age\":10}";

            var dog = DefaultJsonSerializer.DeserializeObject(dogJson, typeof(Animal)) as Dog;

            Assert.That(dog, Is.Not.Null);
            Assert.That(dog.Name, Is.EqualTo("Barney"));
            Assert.That(dog.Age, Is.EqualTo(10));
            Assert.That(dog.FurColor, Is.EqualTo(FurColor.Brindle));
            Assert.That(dog.DogTag, Is.Null);
        }

        [Test]
        public void DeserializeObject_without_type_deserializes_json_into_JObject_using_DefaultSerializerSettings()
        {
            var dogJson = "{\"name\":\"Barney\",\"furColor\":\"brindle\",\"age\":10}";

            var dog = DefaultJsonSerializer.DeserializeObject(dogJson) as JObject;

            Assert.That(dog.Properties().Count(), Is.EqualTo(3));
            Assert.That(dog["name"].ToString(), Is.EqualTo("Barney"));
            Assert.That(dog["age"].ToString(), Is.EqualTo("10"));
            Assert.That(dog["furColor"].ToString(), Is.EqualTo("brindle"));
        }

        [Bindable(true)]
        private class Animal
        {
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Called during JSON deserialization but code analysis cannot detect that.")]
            protected Animal(int age, string name)
            {
                Age = age;
                Name = name;
            }

            public string Name;

            public int Age { get; }
        }

        private enum FurColor
        {
            Black,

            Brindle,

            Golden
        }

        [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Class is used but is constructed via reflection and code analysis cannot detect that.")]
        private class Dog : Animal
        {
            public Dog(int age, string name, FurColor furColor)
                : base(age, name)
            {
                FurColor = furColor;
            }

            public FurColor FurColor { get; }

            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Property is used via reflection and code analysis cannot detect that.")]
            public string DogTag { get; set; }
        }

        [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Class is used but is constructed via reflection and code analysis cannot detect that.")]
        private class Cat : Animal
        {
            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Constructor is used via reflection and code analysis cannot detect that.")]
            public Cat(int age, string name, int numberOfLives)
                : base(age, name)
            {
                NumberOfLives = numberOfLives;
            }

            [SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields", Justification = "Field is used via reflection and code analysis cannot detect that.")]
            public int NumberOfLives;
        }
    }
}
