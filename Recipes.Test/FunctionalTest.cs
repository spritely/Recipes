// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FunctionalTest.cs">
//   Copyright (c) 2015. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System;
    using System.Collections.Generic;
    using NUnit.Framework;

    [TestFixture]
    public class FunctionalTest
    {
        [Test]
        public void AsFunc_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => (null as Action<string>).AsFunc());
        }

        [Test]
        public void AsFunc_result_calls_source_action_when_called()
        {
            var value = "Original value";

            Action<string> myAction = x => { value = x; };
            var myFunc = myAction.AsFunc();

            Assert.That(value, Is.EqualTo("Original value"));

            myFunc("New value");

            Assert.That(value, Is.EqualTo("New value"));
        }

        [Test]
        public void ForEach_throws_on_null_arguments()
        {
            var list = new List<object>();

            Assert.Throws<ArgumentNullException>(() => (null as IEnumerable<object>).ForEach(o => { }));
            Assert.Throws<ArgumentNullException>(() => list.ForEach(null));
        }

        [Test]
        public void ForEach_does_not_call_action_when_list_is_empty()
        {
            var list = new List<object>();
            var called = false;

            list.ForEach(_ => { called = true; });

            Assert.IsFalse(called);
        }

        [Test]
        public void ForEach_calls_action_expected_number_of_times_with_expected_value_each_time()
        {
            var list = new List<int> { 1, 2, 3, 4 };
            var sum = 0;

            list.ForEach(value => { sum += value; });

            Assert.That(sum, Is.EqualTo(10));
        }
    }
}
