// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MustValidationTest.cs">
//   Copyright (c) 2016. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System;
    using System.Linq;
    using FluentAssertions;
    using NUnit.Framework;

    [TestFixture]
    public class MustValidationTest
    {
        [Test]
        public void Must_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => (null as object).Must());
        }

        [Test]
        public void Be_runs_custom_validation_function()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;
            var times = 0;

            new { arg1, arg2, arg3 }.Must().Be((name, value) => { times++; return null; });

            times.Should().Be(3);
        }

        [Test]
        public void Be_throws_exception_returned_by_validation_function()
        {
            var stringArgument = "some string";
            var o = new object();
            var someNumber = 133;

            try
            {
                new { stringArgument, o, someNumber }.Must().Be((name, value) => new TestException { Name = name, Value = value });
            }
            catch (ArgumentException ex)
            {
                var exceptions = (ex.InnerException as AggregateException)?.InnerExceptions;
                exceptions?.Count.Should().Be(3);
                exceptions.ForEach(e => e.Should().BeOfType<TestException>());

                (exceptions?.First() as TestException)?.Name.Should().Be("stringArgument");
                (exceptions?.First() as TestException)?.Value.Should().Be("some string");
                (exceptions?.Skip(1).First() as TestException)?.Name.Should().Be("o");
                (exceptions?.Skip(1).First() as TestException)?.Value.Should().Be(o);
                (exceptions?.Skip(2).First() as TestException)?.Name.Should().Be("someNumber");
                (exceptions?.Skip(2).First() as TestException)?.Value.Should().Be(133);
            }
        }

        [Test]
        public void NotBeNull_throws_when_an_argument_is_null()
        {
            var arg1 = "throw test";
            var arg2 = null as object;
            var arg3 = 5;
            Assert.Throws<ArgumentNullException>(() => new { arg1, arg2, arg3 }.Must().NotBeNull());
        }

        [Test]
        public void NotBeNull_throws_message_contains_name_of_problem_argument()
        {
            var arg1 = "another test";
            var arg2 = 23;
            var arg3 = null as object;
            try
            {
                new { arg1, arg2, arg3 }.Must().NotBeNull();
            }
            catch (ArgumentException ex)
            {
                ex.Message.Should().Contain("arg3");
                ex.Message.Should().NotContain("arg1");
                ex.Message.Should().NotContain("arg2");
            }
            
        }

        [Test]
        public void NotBeNull_does_not_throw_when_no_arguments_are_null()
        {
            var arg1 = "no throw test";
            var arg2 = new object();
            var arg3 = 34.4;

            new { arg1, arg2, arg3 }.Must().NotBeNull();
        }

        [Test]
        public void BeInRange_throws_if_value_is_null()
        {
            var nullArg = null as int?;
            Action act = () => new { nullArg }.Must().BeInRange(50, 100);
            act.ShouldThrow<ArgumentNullException>()
                .And.Message.Should().Contain("nullArg");
        }

        [Test]
        public void BeInRange_throws_if_value_is_of_wrong_type()
        {
            var wrongType = "test";
            Action act = () => new { wrongType }.Must().BeInRange(-100, 50);
            act.ShouldThrow<ArgumentException>()
                .And.Message.Should().Contain("wrongType");
        }

        [Test]
        public void BeInRange_throws_if_value_is_less_than_minimum()
        {
            var tooLowArg = 19;
            Action act = () => new { tooLowArg }.Must().BeInRange(20, int.MaxValue);
            act.ShouldThrow<ArgumentOutOfRangeException>()
                .And.Message.Should().Contain("tooLowArg")
                .And.Contain("20");
        }

        [Test]
        public void BeInRange_throws_if_value_is_greater_than_maximum()
        {
            var tooHighArg = -4;
            Action act = () => new { tooHighArg }.Must().BeInRange(int.MinValue, -5);
            act.ShouldThrow<ArgumentOutOfRangeException>()
                .And.Message.Should().Contain("tooHighArg")
                .And.Contain("-5");
        }

        [Test]
        public void BeInRange_does_not_throw_when_value_is_in_range()
        {
            var arg1 = 0;
            new { arg1 }.Must().BeInRange(-20, 20);
        }

        [Serializable]
        private class TestException : Exception
        {
            public string Name;
            public object Value;
        }
    }
}
