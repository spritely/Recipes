// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MustValidationPlanBuilderTest.cs">
//   Copyright (c) 2017. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using FluentAssertions;
    using NUnit.Framework;

    // See MustExtensions.cs for comments on type definitions
    using GetArguments = System.Func<System.Collections.Generic.IEnumerable<System.Tuple<System.Type, string, object>>>;
    using Rule = System.Tuple<System.Func<System.Type, object, bool>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Type, System.Collections.Generic.IEnumerable<string>, object, string, System.Exception>>;

    [TestFixture]
    public class MustValidationPlanBuilderTest
    {
        [Test]
        public void Named_throws_on_null_name_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => 5.Named(null));
            Assert.Throws<ArgumentException>(() => (0.5).Named("  "));
        }

        [Test]
        public void Named_creates_expected_set_of_arguments()
        {
            var myArg = "the string value";

            var arguments = myArg.Named(nameof(myArg))();
            arguments.Should().HaveCount(1);
            arguments.First().Item1.Should().Be(typeof(string));
            arguments.First().Item2.Should().Be("myArg");
            arguments.First().Item3.Should().Be("the string value");
        }

        [Test]
        public void And_throws_on_null_this_arguments()
        {
            var arg1 = "test";
            Assert.Throws<ArgumentNullException>(() => (null as object).And(arg1.Named(nameof(arg1))));
            Assert.Throws<ArgumentNullException>(() => (null as object).And(new { arg1 }));
            Assert.Throws<ArgumentNullException>(() => (null as GetArguments).And(new { arg1 }));
            Assert.Throws<ArgumentNullException>(() => (null as GetArguments).And(arg1.Named(nameof(arg1))));
        }

        [Test]
        public void And_throws_on_null_other_arguments()
        {
            var arg1 = "test";
            Assert.Throws<ArgumentNullException>(() => new { arg1 }.And(null as object));
            Assert.Throws<ArgumentNullException>(() => new { arg1 }.And(null as GetArguments));
            Assert.Throws<ArgumentNullException>(() => arg1.Named(nameof(arg1)).And(null as object));
            Assert.Throws<ArgumentNullException>(() => arg1.Named(nameof(arg1)).And(null as GetArguments));
        }

        [Test]
        public void And1_creates_expected_set_of_arguments()
        {
            var arg1 = "Hello world!";
            var arg2 = DateTime.UtcNow;
            var arg3 = 15.2;

            var arguments = new { arg1, arg2 }.And(arg3.Named("third argument"))();
            arguments.Should().HaveCount(3);
            arguments.First().Item1.Should().Be(typeof(string));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().Be("Hello world!");
            arguments.Skip(1).First().Item1.Should().Be(typeof(DateTime));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
            arguments.Skip(2).First().Item1.Should().Be(typeof(double));
            arguments.Skip(2).First().Item2.Should().Be("third argument");
            arguments.Skip(2).First().Item3.Should().Be(15.2);
        }

        [Test]
        public void And2_creates_expected_set_of_arguments()
        {
            var arg1 = new object();
            var arg2 = "this is a test";
            var arg3 = 5;
            var arg4 = 98.45;

            var arguments = new { arg1, arg2 }.And(new { arg3, arg4 })();
            arguments.Should().HaveCount(4);
            arguments.First().Item1.Should().Be(typeof(object));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().BeSameAs(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(string));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
            arguments.Skip(2).First().Item1.Should().Be(typeof(int));
            arguments.Skip(2).First().Item2.Should().Be("arg3");
            arguments.Skip(2).First().Item3.Should().Be(5);
            arguments.Skip(3).First().Item1.Should().Be(typeof(double));
            arguments.Skip(3).First().Item2.Should().Be("arg4");
            arguments.Skip(3).First().Item3.Should().Be(98.45);
        }

        [Test]
        public void And3_creates_expected_set_of_arguments()
        {
            var arg1 = new object();
            var arg2 = 1234;
            var arg3 = 15.2;

            var arguments =  arg1.Named(nameof(arg1)).And(new { arg2, arg3 })();
            arguments.Should().HaveCount(3);
            arguments.First().Item1.Should().Be(typeof(object));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().BeSameAs(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(int));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().Be(1234);
            arguments.Skip(2).First().Item1.Should().Be(typeof(double));
            arguments.Skip(2).First().Item2.Should().Be("arg3");
            arguments.Skip(2).First().Item3.Should().Be(15.2);
        }

        [Test]
        public void And4_creates_expected_set_of_arguments()
        {
            var arg1 = DateTime.UtcNow;
            var arg2 = Guid.NewGuid();

            var arguments = arg1.Named("the date").And(arg2.Named("the guid"))();
            arguments.Should().HaveCount(2);
            arguments.First().Item1.Should().Be(typeof(DateTime));
            arguments.First().Item2.Should().Be("the date");
            arguments.First().Item3.Should().Be(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(Guid));
            arguments.Skip(1).First().Item2.Should().Be("the guid");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
        }

        [Test]
        public void Must_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => (null as object).Must());
            Assert.Throws<ArgumentNullException>(() => (null as GetArguments).Must());
        }

        [Test]
        public void Must1_does_not_throw_on_empty_rule_argument()
        {
            var arg1 = "test";
            new { arg1 }.Must();
        }

        [Test]
        public void Must2_does_not_throw_on_empty_rule_argument()
        {
            var arg1 = "test";
            arg1.Named(nameof(arg1)).Must();
        }

        [Test]
        public void Must1_creates_expected_set_of_arguments()
        {
            var arg1 = "some string";
            var arg2 = new object();
            var arg3 = 133;

            var arguments = new { arg1, arg2, arg3 }.Must().Item1();
            arguments.Should().HaveCount(3);
            arguments.First().Item1.Should().Be(typeof(string));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().Be("some string");
            arguments.Skip(1).First().Item1.Should().Be(typeof(object));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().BeSameAs(arg2);
            arguments.Skip(2).First().Item1.Should().Be(typeof(int));
            arguments.Skip(2).First().Item2.Should().Be("arg3");
            arguments.Skip(2).First().Item3.Should().Be(133);
        }

        [Test]
        public void Must2_creates_expected_set_of_arguments()
        {
            var arg1 = Guid.NewGuid();
            var arg2 = TimeSpan.FromDays(1);

            var arguments = arg1.Named("one").And(arg2.Named("two")).Must().Item1();
            arguments.Should().HaveCount(2);
            arguments.First().Item1.Should().Be(typeof(Guid));
            arguments.First().Item2.Should().Be("one");
            arguments.First().Item3.Should().Be(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(TimeSpan));
            arguments.Skip(1).First().Item2.Should().Be("two");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
        }

        [Test]
        public void Must1_adds_supplied_rule_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = new { arg1, arg2, arg3 }.Must(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(1);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Must2_adds_supplied_rule_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;

            var intialRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(1);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Must1_adds_supplied_rules_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = new { arg1, arg2, arg3 }.Must(alwaysBeFalse, alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Must2_adds_supplied_rules_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;

            var intialRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must(alwaysBeFalse, alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void And_throws_on_null_this_argument()
        {
            Assert.Throws<ArgumentNullException>(() => (null as Tuple<GetArguments, IEnumerable<Rule>>).And());
        }

        [Test]
        public void And_does_not_throw_on_empty_rule_argument()
        {
            var arg1 = "test";
            arg1.Named(nameof(arg1)).Must().And();
        }

        [Test]
        public void And_adds_supplied_rule_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = intialRuleSet.And(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(1);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void And_adds_supplied_rules_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = intialRuleSet.And(alwaysBeFalse, alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }
    
        [Test]
        public void And_can_be_chained()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = intialRuleSet.And(alwaysBeFalse).And(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Because_throws_on_null_validation_plan_argument()
        {
            Assert.Throws<ArgumentNullException>(() => (null as Tuple<GetArguments, IEnumerable<Rule>>).Because("Test Reason"));
        }

        [Test]
        public void Because_appends_message_to_all_rules()
        {
            var arg1 = null as object;

            var alwaysBeFalse1 = MakeRule.That(() => false).OrCreateArgumentException().Because("false1");
            var alwaysBeFalse2 = MakeRule.That(() => false).OrCreateArgumentException().Because("false2");

            var initialValidationPlan = new { arg1 }.Must(alwaysBeFalse1, alwaysBeFalse2);
            var newValidationPlan = initialValidationPlan.Because("Shared Message");
            var initialRules = initialValidationPlan.Item2;
            var newRules = newValidationPlan.Item2;

            initialRules.Should().HaveCount(2);
            initialRules.First().Item2.Should().HaveCount(1).And.Contain("false1");
            initialRules.Skip(1).First().Item2.Should().HaveCount(1).And.Contain("false2");

            newRules.Should().HaveCount(2);
            newRules.First().Item2.Should().HaveCount(2).And.Contain("false1").And.Contain("Shared Message");
            newRules.Skip(1).First().Item2.Should().HaveCount(2).And.Contain("false2").And.Contain("Shared Message");
        }
    }
}
