// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MustExtensionsTest.cs">
//   Copyright (c) 2016. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using FluentAssertions;
    using NUnit.Framework;

    // See MustExtensions.cs for comments on type definitions
    using GetArguments = System.Func<System.Collections.Generic.IEnumerable<System.Tuple<System.Type, string, object>>>;
    using Rule = System.Tuple<System.Func<System.Type, object, bool>, System.Collections.Generic.IEnumerable<string>, System.Func<System.Type, System.Collections.Generic.IEnumerable<string>, object, string, System.Exception>>;

    [TestFixture]
    public class MustExtensionsTest
    {
        [Test]
        public void Named_throws_on_null_name_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => 5.Named(null));
            Assert.Throws<ArgumentException>(() => (0.5).Named("  "));
        }

        [Test]
        public void Named_creates_expected_set_of_arguments()
        {
            var myArg = "the string value";

            var arguments = myArg.Named(nameof(myArg))();
            arguments.Should().HaveCount(1);
            arguments.First().Item1.Should().Be(typeof(string));
            arguments.First().Item2.Should().Be("myArg");
            arguments.First().Item3.Should().Be("the string value");
        }

        [Test]
        public void And_throws_on_null_this_arguments()
        {
            var arg1 = "test";
            Assert.Throws<ArgumentNullException>(() => (null as object).And(arg1.Named(nameof(arg1))));
            Assert.Throws<ArgumentNullException>(() => (null as object).And(new { arg1 }));
            Assert.Throws<ArgumentNullException>(() => (null as GetArguments).And(new { arg1 }));
            Assert.Throws<ArgumentNullException>(() => (null as GetArguments).And(arg1.Named(nameof(arg1))));
        }

        [Test]
        public void And_throws_on_null_other_arguments()
        {
            var arg1 = "test";
            Assert.Throws<ArgumentNullException>(() => new { arg1 }.And(null as object));
            Assert.Throws<ArgumentNullException>(() => new { arg1 }.And(null as GetArguments));
            Assert.Throws<ArgumentNullException>(() => arg1.Named(nameof(arg1)).And(null as object));
            Assert.Throws<ArgumentNullException>(() => arg1.Named(nameof(arg1)).And(null as GetArguments));
        }

        [Test]
        public void And1_creates_expected_set_of_arguments()
        {
            var arg1 = "Hello world!";
            var arg2 = DateTime.UtcNow;
            var arg3 = 15.2;

            var arguments = new { arg1, arg2 }.And(arg3.Named("third argument"))();
            arguments.Should().HaveCount(3);
            arguments.First().Item1.Should().Be(typeof(string));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().Be("Hello world!");
            arguments.Skip(1).First().Item1.Should().Be(typeof(DateTime));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
            arguments.Skip(2).First().Item1.Should().Be(typeof(double));
            arguments.Skip(2).First().Item2.Should().Be("third argument");
            arguments.Skip(2).First().Item3.Should().Be(15.2);
        }

        [Test]
        public void And2_creates_expected_set_of_arguments()
        {
            var arg1 = new object();
            var arg2 = "this is a test";
            var arg3 = 5;
            var arg4 = 98.45;

            var arguments = new { arg1, arg2 }.And(new { arg3, arg4 })();
            arguments.Should().HaveCount(4);
            arguments.First().Item1.Should().Be(typeof(object));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().BeSameAs(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(string));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
            arguments.Skip(2).First().Item1.Should().Be(typeof(int));
            arguments.Skip(2).First().Item2.Should().Be("arg3");
            arguments.Skip(2).First().Item3.Should().Be(5);
            arguments.Skip(3).First().Item1.Should().Be(typeof(double));
            arguments.Skip(3).First().Item2.Should().Be("arg4");
            arguments.Skip(3).First().Item3.Should().Be(98.45);
        }

        [Test]
        public void And3_creates_expected_set_of_arguments()
        {
            var arg1 = new object();
            var arg2 = 1234;
            var arg3 = 15.2;

            var arguments =  arg1.Named(nameof(arg1)).And(new { arg2, arg3 })();
            arguments.Should().HaveCount(3);
            arguments.First().Item1.Should().Be(typeof(object));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().BeSameAs(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(int));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().Be(1234);
            arguments.Skip(2).First().Item1.Should().Be(typeof(double));
            arguments.Skip(2).First().Item2.Should().Be("arg3");
            arguments.Skip(2).First().Item3.Should().Be(15.2);
        }

        [Test]
        public void And4_creates_expected_set_of_arguments()
        {
            var arg1 = DateTime.UtcNow;
            var arg2 = Guid.NewGuid();

            var arguments = arg1.Named("the date").And(arg2.Named("the guid"))();
            arguments.Should().HaveCount(2);
            arguments.First().Item1.Should().Be(typeof(DateTime));
            arguments.First().Item2.Should().Be("the date");
            arguments.First().Item3.Should().Be(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(Guid));
            arguments.Skip(1).First().Item2.Should().Be("the guid");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
        }

        [Test]
        public void Must_throws_on_null_arguments()
        {
            Assert.Throws<ArgumentNullException>(() => (null as object).Must());
            Assert.Throws<ArgumentNullException>(() => (null as GetArguments).Must());
        }

        [Test]
        public void Must1_creates_expected_set_of_arguments()
        {
            var arg1 = "some string";
            var arg2 = new object();
            var arg3 = 133;

            var arguments = new { arg1, arg2, arg3 }.Must().Item1();
            arguments.Should().HaveCount(3);
            arguments.First().Item1.Should().Be(typeof(string));
            arguments.First().Item2.Should().Be("arg1");
            arguments.First().Item3.Should().Be("some string");
            arguments.Skip(1).First().Item1.Should().Be(typeof(object));
            arguments.Skip(1).First().Item2.Should().Be("arg2");
            arguments.Skip(1).First().Item3.Should().BeSameAs(arg2);
            arguments.Skip(2).First().Item1.Should().Be(typeof(int));
            arguments.Skip(2).First().Item2.Should().Be("arg3");
            arguments.Skip(2).First().Item3.Should().Be(133);
        }

        [Test]
        public void Must2_creates_expected_set_of_arguments()
        {
            var arg1 = Guid.NewGuid();
            var arg2 = TimeSpan.FromDays(1);

            var arguments = arg1.Named("one").And(arg2.Named("two")).Must().Item1();
            arguments.Should().HaveCount(2);
            arguments.First().Item1.Should().Be(typeof(Guid));
            arguments.First().Item2.Should().Be("one");
            arguments.First().Item3.Should().Be(arg1);
            arguments.Skip(1).First().Item1.Should().Be(typeof(TimeSpan));
            arguments.Skip(1).First().Item2.Should().Be("two");
            arguments.Skip(1).First().Item3.Should().Be(arg2);
        }

        [Test]
        public void Must1_adds_supplied_rule_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = new { arg1, arg2, arg3 }.Must(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(1);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Must2_adds_supplied_rule_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;

            var intialRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(1);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Must1_adds_supplied_rules_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = new { arg1, arg2, arg3 }.Must(alwaysBeFalse, alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Must2_adds_supplied_rules_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;

            var intialRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = arg1.Named(nameof(arg1)).And(arg2.Named(nameof(arg2))).Must(alwaysBeFalse, alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void And_throws_on_null_this_argument()
        {
            Assert.Throws<ArgumentNullException>(() => (null as Tuple<GetArguments, IEnumerable<Rule>>).And());
        }

        [Test]
        public void And_does_not_throw_on_empty_rule_argument()
        {
            var arg1 = "test";
            arg1.Named(nameof(arg1)).Must().And();
        }

        [Test]
        public void And_adds_supplied_rule_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = intialRuleSet.And(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(1);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void And_adds_supplied_rules_to_rule_set()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = intialRuleSet.And(alwaysBeFalse, alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }
    
        [Test]
        public void And_can_be_chained()
        {
            var arg1 = null as object;
            var arg2 = null as object;
            var arg3 = null as object;

            var intialRuleSet = new { arg1, arg2, arg3 }.Must();
            var alwaysBeFalse = MakeRule.That(() => false).OrCreateArgumentException();
            var alwaysBeTrue = MakeRule.That(() => true).OrCreateArgumentException();
            var newRuleSet = intialRuleSet.And(alwaysBeFalse).And(alwaysBeTrue);

            intialRuleSet.Item2.Should().BeEmpty();
            newRuleSet.Item2.Should().HaveCount(2);
            newRuleSet.Item2.Should().Contain(alwaysBeFalse);
            newRuleSet.Item2.Should().Contain(alwaysBeTrue);
        }

        [Test]
        public void Because_appends_message_to_all_rules()
        {
            var arg1 = null as object;

            var alwaysBeFalse1 = MakeRule.That(() => false).OrCreateArgumentException().Because("false1");
            var alwaysBeFalse2 = MakeRule.That(() => false).OrCreateArgumentException().Because("false2");

            var initialValidationPlan = new { arg1 }.Must(alwaysBeFalse1, alwaysBeFalse2);
            var newValidationPlan = initialValidationPlan.Because("Shared Message");
            var initialRules = initialValidationPlan.Item2;
            var newRules = newValidationPlan.Item2;

            initialRules.Should().HaveCount(2);
            initialRules.First().Item2.Should().HaveCount(1).And.Contain("false1");
            initialRules.Skip(1).First().Item2.Should().HaveCount(1).And.Contain("false2");

            newRules.Should().HaveCount(2);
            newRules.First().Item2.Should().HaveCount(2).And.Contain("false1").And.Contain("Shared Message");
            newRules.Skip(1).First().Item2.Should().HaveCount(2).And.Contain("false2").And.Contain("Shared Message");
        }

        [Test]
        public void Report_calls_correct_validation_functions()
        {
            var arg1 = null as object;
            var arg2 = null as string;
            var arg3 = null as int?;
            var times1 = 0;
            var times2 = 0;
            var times3 = 0;

            var testRule1 = MakeRule.That<object>(
                v =>
                {
                    times1++;
                    return true;
                }).OrCreateArgumentException();

            var testRule2 = MakeRule.That<string>(
                v =>
                {
                    times2++;
                    return true;
                }).OrCreateArgumentException();

            var testRule3 = MakeRule.That<int?>(
                v =>
                {
                    times3++;
                    return true;
                }).OrCreateArgumentException();

            new { arg1, arg2, arg3 }.Must(testRule1, testRule2, testRule3).Report().ToList();

            times1.Should().Be(3);
            times2.Should().Be(1);
            times3.Should().Be(1);
        }

        [Test]
        public void OrThrow_calls_correct_validation_functions()
        {
            var arg1 = null as object;
            var arg2 = null as string;
            var arg3 = null as int?;
            var times1 = 0;
            var times2 = 0;
            var times3 = 0;

            var testRule1 = MakeRule.That<object>(
                v =>
                {
                    times1++;
                    return true;
                }).OrCreateArgumentException();

            var testRule2 = MakeRule.That<int>(
                v =>
                {
                    times2++;
                    return true;
                }).OrCreateArgumentException();

            var testRule3 = MakeRule.That<decimal>(
                v =>
                {
                    times3++;
                    return true;
                }).OrCreateArgumentException();

            new { arg1, arg2, arg3 }.Must(testRule1, testRule2, testRule3).OrThrow();

            times1.Should().Be(3);
            times2.Should().Be(0);
            times3.Should().Be(0);
        }

        [Test]
        public void Report_calls_validation_functions_with_expected_arguments()
        {
            var arg1 = "test";
            var arg2 = 1.5;
            var arg3 = null as int?;
            var actualStringValue = string.Empty;
            var actualDoubleValue = 0.0;
            int? actualIntValue = -1;

            var testRule1 = MakeRule.That<string>(
                v =>
                {
                    actualStringValue = v;
                    return true;
                }).OrCreateArgumentException();

            var testRule2 = MakeRule.That<double>(
                v =>
                {
                    actualDoubleValue = v;
                    return true;
                }).OrCreateArgumentException();

            var testRule3 = MakeRule.That<int?>(
                v =>
                {
                    actualIntValue = v;
                    return true;
                }).OrCreateArgumentException();

            new { arg1, arg2, arg3 }.Must(testRule1, testRule2, testRule3).Report().ToList();

            actualStringValue.Should().Be("test");
            actualDoubleValue.Should().Be(1.5);
            actualIntValue.Should().Be(null);
        }

        [Test]
        public void OrThrow_calls_validation_functions_with_expected_arguments()
        {
            var arg1 = 5;
            var arg2 = "test";
            var arg3 = DateTime.UtcNow;
            var actualIntValue = 0;
            var actualStringValue = string.Empty;
            var actualDateTimeValue = DateTime.MinValue;

            var testRule1 = MakeRule.That<int>(
                v =>
                {
                    actualIntValue = v;
                    return true;
                }).OrCreateArgumentException();

            var testRule2 = MakeRule.That<string>(
                v =>
                {
                    actualStringValue = v;
                    return true;
                }).OrCreateArgumentException();

            var testRule3 = MakeRule.That<DateTime>(
                v =>
                {
                    actualDateTimeValue = v;
                    return true;
                }).OrCreateArgumentException();

            new { arg1, arg2, arg3 }.Must(testRule1, testRule2, testRule3).Report().ToList();

            actualIntValue.Should().Be(5);
            actualStringValue.Should().Be("test");
            actualDateTimeValue.Should().Be(arg3);
        }

        [Test]
        public void Report_returns_expected_results()
        {
            var arg1 = new object();
            var arg2 = 1.5;
            var arg3 = "test";

            var alwaysBeTrue = MakeRule.That<object>(o => true).OrCreateArgumentException();
            var alwaysBeFalse = MakeRule.That<string>(s => false).OrCreateArgumentException().Because("Test");

            var report = new { arg1, arg2, arg3 }.Must(alwaysBeTrue, alwaysBeFalse).Report().ToList();

            report.Should().HaveCount(6); // all combinations
            report.First().Item1.Should().Be(typeof(object));
            report.First().Item2.Should().Be("arg1");
            report.First().Item3.Should().Be(arg1);
            report.First().Item4.Should().BeTrue();
            report.First().Item5.Should().BeEmpty();
            report.First().Item6.Should().BeSameAs(alwaysBeTrue.Item3);
            report.Skip(1).First().Item1.Should().Be(typeof(object));
            report.Skip(1).First().Item2.Should().Be("arg1");
            report.Skip(1).First().Item3.Should().Be(arg1);
            report.Skip(1).First().Item4.Should().BeTrue(); // because type is not string
            report.Skip(1).First().Item5.Should().HaveCount(1);
            report.Skip(1).First().Item5.Should().Contain("Test");
            report.Skip(1).First().Item6.Should().BeSameAs(alwaysBeFalse.Item3);
            report.Skip(2).First().Item1.Should().Be(typeof(double));
            report.Skip(2).First().Item2.Should().Be("arg2");
            report.Skip(2).First().Item3.Should().Be(arg2);
            report.Skip(2).First().Item4.Should().BeTrue();
            report.Skip(2).First().Item5.Should().BeEmpty();
            report.Skip(2).First().Item6.Should().BeSameAs(alwaysBeTrue.Item3);
            report.Skip(3).First().Item1.Should().Be(typeof(double));
            report.Skip(3).First().Item2.Should().Be("arg2");
            report.Skip(3).First().Item3.Should().Be(arg2);
            report.Skip(3).First().Item4.Should().BeTrue(); // because type is not string
            report.Skip(3).First().Item5.Should().HaveCount(1);
            report.Skip(3).First().Item5.Should().Contain("Test");
            report.Skip(3).First().Item6.Should().BeSameAs(alwaysBeFalse.Item3);
            report.Skip(4).First().Item1.Should().Be(typeof(string));
            report.Skip(4).First().Item2.Should().Be("arg3");
            report.Skip(4).First().Item3.Should().Be(arg3);
            report.Skip(4).First().Item4.Should().BeTrue();
            report.Skip(4).First().Item5.Should().BeEmpty();
            report.Skip(4).First().Item6.Should().BeSameAs(alwaysBeTrue.Item3);
            report.Skip(5).First().Item1.Should().Be(typeof(string));
            report.Skip(5).First().Item2.Should().Be("arg3");
            report.Skip(5).First().Item3.Should().Be(arg3);
            report.Skip(5).First().Item4.Should().BeFalse();
            report.Skip(5).First().Item5.Should().HaveCount(1);
            report.Skip(5).First().Item5.Should().Contain("Test");
            report.Skip(5).First().Item6.Should().BeSameAs(alwaysBeFalse.Item3);
        }

        [Test]
        public void OrThrow_does_not_call_GetException_when_validation_succeeds()
        {
            var arg1 = Guid.NewGuid();
            int? arg2 = null;

            var called = false;
            var alwaysBeTrue = MakeRule.That<object>(o => true);
            
            var beTrue1 = alwaysBeTrue.OrCreate(
                () =>
                {
                    called = true;
                    return new Exception();
                });

            var beTrue2 = alwaysBeTrue.OrCreate(
                argumentName =>
                {
                    called = true;
                    return new Exception();
                });

            var beTrue3 = alwaysBeTrue.OrCreate(
                (argumentValue, argumentName) =>
                {
                    called = true;
                    return new Exception();
                });

            var beTrue4 = alwaysBeTrue.OrCreate(
                (messages, argumentValue, argumentName) =>
                {
                    called = true;
                    return new Exception();
                });

            var beTrue5 = alwaysBeTrue.OrCreate(
                (type, messages, argumentValue, argumentName) =>
                {
                    called = true;
                    return new Exception();
                });

            new { arg1, arg2 }.Must(beTrue1).OrThrow();
            new { arg1, arg2 }.Must(beTrue2).OrThrow();
            new { arg1, arg2 }.Must(beTrue3).OrThrow();
            new { arg1, arg2 }.Must(beTrue4).OrThrow();
            new { arg1, arg2 }.Must(beTrue5).OrThrow();

            called.Should().BeFalse();
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly", Justification = "Test is about the type and parameter name is irrelevant here.")]
        [Test]
        public void OrThrow_calls_getException_with_expected_arguments_when_validation_fails()
        {
            var arg1 = "Value";

            string argumentName1 = null;
            string argumentName2 = null;
            string argumentName3 = null;
            string argumentName4 = null;
            object argumentValue2 = null;
            object argumentValue3 = null;
            object argumentValue4 = null;
            IEnumerable<string> messages3 = null;
            IEnumerable<string> messages4 = null;
            Type type4 = null;

            var alwaysBeFalse = MakeRule.That<object>(o => false);

            var beFalse1 = alwaysBeFalse.OrCreate(
                argumentName =>
                {
                    argumentName1 = argumentName;
                    return new ArgumentException();
                });

            var beFalse2 = alwaysBeFalse.OrCreate(
                (argumentValue, argumentName) =>
                {
                    argumentName2 = argumentName;
                    argumentValue2 = argumentValue;
                    return new ArgumentException();
                });

            var beFalse3 = alwaysBeFalse.OrCreate(
                (messages, argumentValue, argumentName) =>
                {
                    argumentName3 = argumentName;
                    argumentValue3 = argumentValue;
                    messages3 = messages;
                    return new ArgumentException();
                }).Because("Test1");

            var beFalse4 = alwaysBeFalse.OrCreate(
                (type, messages, argumentValue, argumentName) =>
                {
                    argumentName4 = argumentName;
                    argumentValue4 = argumentValue;
                    messages4 = messages;
                    type4 = type;
                    return new ArgumentException();
                }).Because("Test1").Because("Test2");

            Assert.Throws<ArgumentException>(() => new { arg1 }.Must(beFalse1).OrThrow());
            Assert.Throws<ArgumentException>(() => new { arg1 }.Must(beFalse2).OrThrow());
            Assert.Throws<ArgumentException>(() => new { arg1 }.Must(beFalse3).OrThrow());
            Assert.Throws<ArgumentException>(() => new { arg1 }.Must(beFalse4).OrThrow());

            argumentName1.Should().Be("arg1");
            argumentName2.Should().Be("arg1");
            argumentName3.Should().Be("arg1");
            argumentName4.Should().Be("arg1");
            argumentValue2.Should().Be("Value");
            argumentValue3.Should().Be("Value");
            argumentValue4.Should().Be("Value");
            messages3.Should().HaveCount(1).And.Contain("Test1");
            messages4.Should().HaveCount(2).And.ContainInOrder("Test1", "Test2");
            type4.Should().Be<string>();
        }

        [Test]
        public void OrThrow_does_not_throw_when_getException_returns_null()
        {
            var arg1 = "Value";

            var alwaysBeFalse = MakeRule.That<object>(o => false);

            var beFalse1 = alwaysBeFalse.OrCreate<object, ArgumentException>(() => null);
            var beFalse2 = alwaysBeFalse.OrCreate<object, ArgumentException>(_ => null);
            var beFalse3 = alwaysBeFalse.OrCreate<object, ArgumentException>((_, __) => null);
            var beFalse4 = alwaysBeFalse.OrCreate<object, ArgumentException>((_, __, ___) => null);
            var beFalse5 = alwaysBeFalse.OrCreate<object, ArgumentException>((_, __, ___, ____) => null);

            Assert.DoesNotThrow(() => new { arg1 }.Must(beFalse1).OrThrow());
            Assert.DoesNotThrow(() => new { arg1 }.Must(beFalse2).OrThrow());
            Assert.DoesNotThrow(() => new { arg1 }.Must(beFalse3).OrThrow());
            Assert.DoesNotThrow(() => new { arg1 }.Must(beFalse4).OrThrow());
            Assert.DoesNotThrow(() => new { arg1 }.Must(beFalse5).OrThrow());
        }

        [Test]
        public void OrThrow_throws_exception_returned_from_getException_if_only_validation_exception()
        {
            var arg1 = "Value";

            var alwaysBeFalse = MakeRule.That<object>(o => false);

            var beFalse1 = alwaysBeFalse.OrCreate(() => new TestException());
            var beFalse2 = alwaysBeFalse.OrCreate(_ => new TestException());
            var beFalse3 = alwaysBeFalse.OrCreate((_, __) => new TestException());
            var beFalse4 = alwaysBeFalse.OrCreate((_, __, ___) => new TestException());
            var beFalse5 = alwaysBeFalse.OrCreate((_, __, ___, ____) => new TestException());

            Assert.Throws<TestException>(() => new { arg1 }.Must(beFalse1).OrThrow());
            Assert.Throws<TestException>(() => new { arg1 }.Must(beFalse2).OrThrow());
            Assert.Throws<TestException>(() => new { arg1 }.Must(beFalse3).OrThrow());
            Assert.Throws<TestException>(() => new { arg1 }.Must(beFalse4).OrThrow());
            Assert.Throws<TestException>(() => new { arg1 }.Must(beFalse5).OrThrow());
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "OrThrow", Justification = "This text refers to a valid method name.")]
        [Test]
        public void OrThrow_throws_ArgumentException_containing_all_failed_exceptions_when_multiple_validations_fail()
        {
            var arg1 = "Value";
            int? arg2 = null;

            var notBeNull = MakeRule.That<object>(o => o != null).OrCreateArgumentNullException();
            var notBeEqualToValue = MakeRule.That<string>(s => s != "Value").OrCreateArgumentException();

            try
            {
                new { arg1, arg2 }.Must(notBeNull, notBeEqualToValue).OrThrow();
            }
            catch (ArgumentException ex)
            {
                ex.InnerException.Should().NotBeNull();
                ex.InnerException.Should().BeOfType<AggregateException>();
                (ex.InnerException as AggregateException).InnerExceptions.Should().HaveCount(2);
                (ex.InnerException as AggregateException).InnerExceptions.First()
                    .Should().BeOfType<ArgumentException>();
                (ex.InnerException as AggregateException).InnerExceptions.First()
                    .GetType()
                    .Should()
                    .NotBe<ArgumentNullException>();
                (ex.InnerException as AggregateException).InnerExceptions.Skip(1).First()
                    .Should().BeOfType<ArgumentNullException>();

                return;
            }

            Assert.Fail("Expected OrThrow() to throw but it didn't.");
        }

        [Serializable]
        private class TestException : Exception
        {
        }
    }
}
