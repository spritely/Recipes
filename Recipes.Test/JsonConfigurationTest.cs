// --------------------------------------------------------------------------------------------------------------------
// <copyright file="JsonConfigurationTest.cs">
//   Copyright (c) 2015. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes.Test
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Security;
    using Newtonsoft.Json;
    using NUnit.Framework;

    [TestFixture]
    public class JsonConfigurationTest
    {
        [Test]
        public void Serializer_serializes_camel_cased_properties()
        {
            var value = new CamelCasedPropertyTest()
            {
                TestName = "Hello"
            };

            var result = JsonConvert.SerializeObject(value, JsonConfiguration.SerializerSettings);

            var serializedValue = "{" + Environment.NewLine +
                                  "  \"testName\": \"Hello\"" + Environment.NewLine +
                                  "}";

            Assert.That(result, Is.EqualTo(serializedValue));
        }

        [Test]
        public void Serializer_deserializes_camel_cased_properties()
        {
            var serializedValue = "{" + Environment.NewLine +
                                  "  \"testName\": \"there\"" + Environment.NewLine +
                                  "}";

            var result = JsonConvert.DeserializeObject<CamelCasedPropertyTest>(serializedValue, JsonConfiguration.SerializerSettings);

            Assert.That(result.TestName, Is.EqualTo("there"));
        }

        [Test]
        public void Serializer_serializes_camel_cased_enumerations()
        {
            var value = new CamelCasedEnumTest()
            {
                Value = TestEnum.FirstOption
            };

            var result = JsonConvert.SerializeObject(value, JsonConfiguration.SerializerSettings);

            var serializedValue = "{" + Environment.NewLine +
                                  "  \"value\": \"firstOption\"" + Environment.NewLine +
                                  "}";

            Assert.That(result, Is.EqualTo(serializedValue));
        }

        [Test]
        public void Serializer_deserializes_camel_cased_enumerations()
        {
            var serializedValue = "{" + Environment.NewLine +
                                  "  \"value\": \"secondOption\"" + Environment.NewLine +
                                  "}";

            var result = JsonConvert.DeserializeObject<CamelCasedEnumTest>(serializedValue, JsonConfiguration.SerializerSettings);

            Assert.That(result.Value, Is.EqualTo(TestEnum.SecondOption));
        }

        [Test]
        public void Serializer_serializes_and_deserializes_SecureString_types()
        {
            var serializedValue = "{" + Environment.NewLine +
                                  "  \"secure\": \"Password\"" + Environment.NewLine +
                                  "}";

            var deserialized = JsonConvert.DeserializeObject<SecureStringTest>(serializedValue, JsonConfiguration.SerializerSettings);

            var result = JsonConvert.SerializeObject(deserialized, JsonConfiguration.SerializerSettings);

            Assert.That(result, Is.EqualTo(serializedValue));
        }

        [Test]
        public void Serializer_serializes_KnownTypes()
        {
            var value = new InheritedTypeBase[]
            {
                new InheritedTypeChild1
                {
                    Base = "Base",
                    Child1 = "Child1"
                },
                new InheritedTypeChild2
                {
                    Base = "my base",
                    Child2 = "my child 2"
                }
            };

            var result = JsonConvert.SerializeObject(value, JsonConfiguration.SerializerSettings);

            var serializedValue = "[" + Environment.NewLine +
                                  "  {" + Environment.NewLine +
                                  "    \"child1\": \"Child1\"," + Environment.NewLine +
                                  "    \"base\": \"Base\"" + Environment.NewLine +
                                  "  }," + Environment.NewLine +
                                  "  {" + Environment.NewLine +
                                  "    \"child2\": \"my child 2\"," + Environment.NewLine +
                                  "    \"base\": \"my base\"" + Environment.NewLine +
                                  "  }" + Environment.NewLine +
                                  "]";

            Assert.That(result, Is.EqualTo(serializedValue));
        }

        [Test]
        public void Serializer_deserializes_KnownTypes()
        {
            var serializedValue = "[" + Environment.NewLine +
                                  "  {" + Environment.NewLine +
                                  "    \"child1\": \"My child 1\"," + Environment.NewLine +
                                  "    \"base\": \"My base\"" + Environment.NewLine +
                                  "  }," + Environment.NewLine +
                                  "  {" + Environment.NewLine +
                                  "    \"child2\": \"child 2\"," + Environment.NewLine +
                                  "    \"base\": \"base\"" + Environment.NewLine +
                                  "  }" + Environment.NewLine +
                                  "]";

            var result = JsonConvert.DeserializeObject<InheritedTypeBase[]>(serializedValue, JsonConfiguration.SerializerSettings);

            Assert.That(result.Length, Is.EqualTo(2));
            Assert.That(result[0].Base, Is.EqualTo("My base"));
            Assert.That((result[0] as InheritedTypeChild1), Is.Not.Null);
            Assert.That((result[0] as InheritedTypeChild1).Child1, Is.EqualTo("My child 1"));
            Assert.That(result[1].Base, Is.EqualTo("base"));
            Assert.That((result[1] as InheritedTypeChild2), Is.Not.Null);
            Assert.That((result[1] as InheritedTypeChild2).Child2, Is.EqualTo("child 2"));
        }

        private class CamelCasedPropertyTest
        {
            public string TestName;
        }

        private class CamelCasedEnumTest
        {
            public TestEnum Value;
        }

        [SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses",
            Justification = "Class is used by code external to test")]
        private class SecureStringTest
        {
#pragma warning disable 649

            [SuppressMessage("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields",
                Justification = "Field is used by code external to test")]
            public SecureString Secure;

#pragma warning restore
        }

        private enum TestEnum
        {
            FirstOption,
            SecondOption
        }

        public class InheritedTypeBase
        {
            public string Base;
        }

        public class InheritedTypeChild1 : InheritedTypeBase
        {
            public string Child1;
        }

        public class InheritedTypeChild2 : InheritedTypeBase
        {
            public string Child2;
        }
    }
}
